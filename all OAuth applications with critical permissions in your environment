let RelevantNodes = ExposureGraphNodes

| where NodeLabel == "Microsoft Entra OAuth App" or NodeLabel == "serviceprincipal"

| project NodeId, NodeLabel, NodeName, NodeProperties;

ExposureGraphEdges

| where EdgeLabel == "has permissions to" or EdgeLabel == "can authenticate as"

| make-graph SourceNodeId --> TargetNodeId with RelevantNodes on NodeId

| graph-match (AppRegistration)-[canAuthAs]->(SPN)-[hasPermissionTo]->(Target)

        where AppRegistration.NodeLabel == "Microsoft Entra OAuth App" and

        canAuthAs.EdgeLabel == "can authenticate as" and

        SPN.NodeLabel == "serviceprincipal" and

        SPN.NodeProperties["rawData"]["criticalityLevel"]["criticalityLevel"] == 0 and

        hasPermissionTo.EdgeLabel == @"has permissions to" and

        Target.NodeLabel == "Microsoft Entra OAuth App" and

        Target.NodeName == "Microsoft Graph"

        project AppReg=AppRegistration.NodeLabel,

         canAuthAs=canAuthAs.EdgeLabel, SPN.NodeLabel, DisplayName=SPN.NodeProperties["rawData"]["accountDisplayName"],

         Enabled=SPN.NodeProperties["rawData"]["accountEnabled"], AppTenantID=SPN.NodeProperties["rawData"]["appOwnerOrganizationId"],

         hasPermissionTo=hasPermissionTo.EdgeLabel, Target=Target.NodeName,

         AppPerm=hasPermissionTo.EdgeProperties["rawData"]["applicationPermissions"]["permissions"]

| mv-apply AppPerm on (summarize AppPerm = make_list(AppPerm.permissionValue))

| project AppReg, canAuthAs, DisplayName, Enabled, AppTenantID, hasPermissionTo, Target, AppPerm
